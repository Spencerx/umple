use constructor_DeclareDefault.ump;
use constructor_DeclareOneToOne.ump;
use specializationCode_Constructor.ump;


class UmpleToPython {
    constructor_Declare_All <<!<</*constructor_Declare_All*/>><<#
  boolean isOneToOne = false;

  for (AssociationVariable av : uClass.getAssociationVariables()) 
  {

   #>><<@ UmpleToPython.specializationCode_Constructor >><<#

    if (av.isOnlyOne() && relatedAssociation.isOnlyOne() && av.getIsNavigable() && relatedAssociation.getIsNavigable())
    {
      isOneToOne = true;
      break;
    }
  }
  String componentSignature="";
  String componentSignatureCaller="";
  String distributedConstructorCheckCode="";
  String lastArgumentComma="";
  if(uClass.getIsDistributed()&&model.getDistributePattern()==0)
  {    
    if(!uClass.isRoot()&& uClass.getExtendsClass().getIsDistributed())
    {
      if (!gClass.getParentClass().getLookup("constructorSignature_caller").equals(""))
        componentSignatureCaller=",umpleComponent";
      else
        componentSignatureCaller="umpleComponent";  
    }
    if(!gClass.getLookup("constructorSignature").equals(""))
    {
      lastArgumentComma=",";
      componentSignature=", UmpleRuntime.UmpleComponent umpleComponent";      
    }
    else
    {
      componentSignature="UmpleRuntime.UmpleComponent umpleComponent";
    }  
  } 
  #>><<@ UmpleToPython.constructor_DeclareDefault >><<#
  if (isOneToOne)
  {
    #>><<@ UmpleToPython.constructor_DeclareOneToOne >><<#
  }

#>>!>>
}
