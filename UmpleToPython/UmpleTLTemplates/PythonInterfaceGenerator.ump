use UmpleNotice.ump;
use import_packages_interface.ump;
use interface_AbstractMethodDeclaration.ump;
use interface_constantDeclaration.ump;


namespace cruise.umple.compiler.python;

external interface ILang{}

class PythonInterfaceGenerator {
    depend cruise.umple.parser.Position;
    depend cruise.umple.compiler.*;
    depend cruise.umple.util.*;
    depend java.util.*;

    isA ILang;

    // Add a newline to the end of the input
    private void appendln(StringBuilder buffer, String input, Object... variables)
    {
        append(buffer, input + "\n", variables);
    }

    // This method will be used to append formatted strings
    // i.e. format("Hello {0} {1}", "andrew","forward");
    private void append(StringBuilder buffer, String input, Object... variables)
    {
        buffer.append(StringFormatter.format(input,variables));
    }

    emit getCode(UmpleModel model, UmpleElement uElement)(PythonInterfaceGenerator);


    PythonInterfaceGenerator <<!<</*PythonInterfaceGenerator*/>><<@ UmpleToPython.UmpleNotice >>
<<#
  UmpleInterface uInterface = (UmpleInterface) uElement;
  //GeneratedInterface gInterface = uInterface.getGeneratedInterface();
  PythonGenerator gen = new PythonGenerator();
  gen.setModel(model);

  String extraCode = "";
  if (uInterface.getExtraCode() != null)
  {
    extraCode = uInterface.getExtraCode();
  }

#>>
<<=gen.translate("packageDefinition",uInterface)>><<@ UmpleToPython.import_packages_interface >>

<<# if (uInterface.numberOfComments() > 0 && uInterface.numberOfRequirements() > 0) { List<Comment> toComment = new ArrayList<Comment>(uInterface.getComments()); toComment.addAll(Requirement.convertToComment(uInterface.getRequirements())); append(realSb, "\n{0}", Comment.format("Javadoc", toComment)); } #>>
<<# if (uInterface.numberOfComments() > 0 && uInterface.numberOfRequirements() == 0) { append(realSb, "\n{0}", Comment.format("Javadoc",uInterface.getComments())); } #>>
<<# if (uInterface.numberOfComments() == 0 && uInterface.numberOfRequirements() > 0) { append(realSb, "\n{0}", Requirement.format("Javadoc",uInterface.getRequirements())); } #>>
<<# for (Position p : uInterface.getPositions()) { #>>
// line <<= p.getLineNumber() >> "<<= uInterface.getRelativePath(p.getFilename(),"Java") >>"
<<# } #>>
public interface <<=uInterface.getName()>><<= gen.translate("isA",uInterface) >>
{
  <<=extraCode>>
<<# if (uInterface.hasConstants()) { #>><<@ UmpleToPython.interface_constantDeclaration >>
<<# } #>>
 <<# if (uInterface.hasMethods()) { #>><<@ UmpleToPython.interface_AbstractMethodDeclaration >>
<<# } #>>
}!>>
}
